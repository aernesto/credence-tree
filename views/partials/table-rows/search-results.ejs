
<%

function expandAssertion (assertionObj) {

  if (assertionObj != undefined) {

    var unary = false;
    var binary = false;
    var symbol = '';
    var other = {};

    if ('proposition' in assertionObj) {
      return "<a href='/claim?id=" +
        assertionObj.id + "'>" +
        assertionObj.proposition + "</a>";

    // unary operators
    } else if ('not' in assertionObj) {
      unary = true;
      symbol = '~';
      other = assertionObj.not;
    } else if ('possibly' in assertionObj) {
      unary = true;
      symbol = '&#9671;';
      other = assertionObj.possibly;
    } else if ('necessarily' in assertionObj) {
      unary = true;
      symbol = '&#9633;';
      other = assertionObj.necessarily;

    // binary operators
    } else if ('and' in assertionObj) {
      binary = true;
      symbol = '&#8743;';
      other = assertionObj.and;
    } else if ('or' in assertionObj) {
      binary = true;
      symbol = '&#8744;';
      other = assertionObj.or;
    } else if ('implies' in assertionObj) {
      binary = true;
      symbol = '&#8594;';
      other = assertionObj.implies;
    } else if ('if and only if' in assertionObj) {
      binary = true;
      symbol = '&#8596;';
      other = assertionObj['if and only if'];
    } else if ('is identical to' in assertionObj) {
      binary = true;
      symbol = '=';
      other = assertionObj['is identical to'];
    }

    if (unary) {
      return "<a href='/claim?id=" + assertionObj.id +
          "'>" + symbol + "</a> ( " + expandAssertion(other) + " )";
    }

    if (binary) {
      var left = expandAssertion(other[0]);
      var right = expandAssertion(other[1]);
      return "( " + left + " ) <a href='/claim?id=" + assertionObj.id +
          "'>" + symbol + "</a> ( " + right + " )";
    }

  } else {
    return 'error';
  }
}

function expandArgument (argumentObj) {

  if (argumentObj != undefined) {

    var i;
    var returnString = '';
    for (i = 0; i < argumentObj.premises.length; i++) {
      if (i > 0) {
        returnString += "</br>";
      }
      returnString += "<a href='/claim?id=" + argumentObj.id +
        "'>" + 'P' + (i+1) + "</a>: " + 
        expandAssertion(argumentObj.premises[i]);
    }

    return returnString + "</br><a href='/claim?id=" + argumentObj.id +
        "'>" + 'C' + "</a>: " + 
        expandAssertion(argumentObj.conclusion);

  } else {
    return 'error';
  }
}

%>

<tr>
  <td colspan='1' class='width1 results'></td>
  <td colspan='3' class='width3 results'>

    <div class='left-label'>
    <a href='#' onclick='showAssertions(this);'>assertions</a> /
    <a href='#' onclick='showArguments(this);'>arguments</a></div>
    <div class='right-label'></div>

  </td>
  <td colspan='1' class='width1 results'></td>
</tr>

<tr>
  <td colspan='1' class='width1 results'></td>
  <td colspan='3' class='width3 results'>

    <div class='assertions content-panel'> <br/>

      <% if (typeof assertionResults != 'undefined') { %>

        <% if (assertionResults.length == 0) { %> no assertion results <% } %>

        <% for (var i = 0; i < assertionResults.length; i++) { %>
          <% var assertionObj = assertionResults[i]; %>
          <% if (i > 0) { %> <br/> <br/> <% } %>
          <%- expandAssertion(assertionObj.asserts); %>
        <% } %>

      <% } %>

    <br/> <br/> </div>

    <div class='arguments content-panel hidden'> <br/>

      <% if (typeof argumentResults != 'undefined') { %>

        <% if (argumentResults.length == 0) { %> no argument results <% } %>

        <% for (var i = 0; i < argumentResults.length; i++) { %>
          <% var argumentObj = argumentResults[i]; %>
          <% if (i > 0) { %> <br/> <br/> <% } %>
          <%- expandArgument(argumentObj); %>
        <% } %>

      <% } %>

    <br/> <br/> </div>

  </td>
  <td colspan='1' class='width1 results'></td>
</tr>
